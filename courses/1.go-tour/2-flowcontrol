### For

Go has only one looping construct, the for loop.

The basic for loop has three components separated by semicolons:

the init statement: executed before the first iteration
the condition expression: evaluated before every iteration
the post statement: executed at the end of every iteration
The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement.

The loop will stop iterating once the boolean condition evaluates to false.

Note: Unlike other languages like C, Java, or JavaScript there are no parentheses surrounding the three components of the for statement and the braces { } are always required.

```
package main

import "fmt"

func main() {
	sum := 0
	for i := 0; i < 10; i++ {
		sum += i
	}
	fmt.Println(sum)
}
```

### For continued

The init and post statements are optional.

the init and post statements are optional. Your code omits them, leaving only the condition. This makes it behave exactly like a while loop.

for ; sum < 1000;: This can be read as "while the sum is less than 1000, do the following...".
sum += sum: This is the loop's body. It's shorthand for sum = sum + sum, which effectively doubles the value of sum in each iteration.

equivalent to a while loop

```
package main

import "fmt"

func main() {
	sum := 1
	for ; sum < 1000; {
		sum += sum
	}
	fmt.Println(sum)
}
```

For is Go's "while"

At that point you can drop the semicolons: C's while is spelled for in Go.

```
package main

import "fmt"

func main() {
	sum := 1
	for sum < 1000 {
		sum += sum
	}
	fmt.Println(sum)
}
```

### Forever

If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.

```
package main

func main() {
	for {
	}
}
```

### If

Go's if statements are like its for loops; the expression need not be surrounded by parentheses ( ) but the braces { } are required.

```
package main

import (
	"fmt"
	"math"
)

func sqrt(x float64) string {
	if x < 0 {
		return sqrt(-x) + "i"
	}
	return fmt.Sprint(math.Sqrt(x))
}

func main() {
	fmt.Println(sqrt(2), sqrt(-4))
}
```

### If with a short statement

Like for, the if statement can start with a short statement to execute before the condition.

Variables declared by the statement are only in scope until the end of the if.

(Try using v in the last return statement.)

```
package main

import (
	"fmt"
	"math"
)

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	}
	return lim
}

func main() {
	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
	)
}
```

### If and else

Variables declared inside an if short statement are also available inside any of the else blocks.

(Both calls to pow return their results before the call to fmt.Println in main begins.)

```
package main

import (
	"fmt"
	"math"
)

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	} else {
		fmt.Printf("%g >= %g\n", v, lim)
	}
	// can't use v here, though
	return lim
}

func main() {
	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
	)
}
package main

import (
	"fmt"
	"math"
)

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		return v
	} else {
		fmt.Printf("%g >= %g\n", v, lim)
	}
	// can't use v here, though
	return lim
}

func main() {
	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
	)
}
```

### Switch

A switch statement is a shorter way to write a sequence of if - else statements. It runs the first case whose value is equal to the condition expression.

Go's switch is like the one in C, C++, Java, JavaScript, and PHP, except that Go only runs the selected case, not all the cases that follow. In effect, the break statement that is needed at the end of each case in those languages is provided automatically in Go. Another important difference is that Go's switch cases need not be constants, and the values involved need not be integers.

```
package main

import (
	"fmt"
	"runtime"
)

func main() {
	fmt.Print("Go runs on ")
	switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("macOS.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.\n", os)
	}
}

```

### Switch evaluation order

Switch cases evaluate cases from top to bottom, stopping when a case succeeds.

```
switch i {
case 0:
case f():
}
```

does not call f if i==0.)


### Switch with no condition
Switch without a condition is the same as switch true.

This construct can be a clean way to write long if-then-else chains.


The switch Statement
A switch statement is much more powerful because the compiler is smart and can choose the best implementation strategy based on the case values.

Strategy A: Compile it into an if-else chain
For a small number of cases (like your example with 3 branches), the Go compiler will likely generate the exact same code as the if-else chain. It will just be a simple, sequential comparison.

Result: No performance difference.
Strategy B: Create a Jump Table (for Integers)
If you are switching on an integer and the cases are close together (e.g., case 1, 2, 3, 4, 5), the compiler can create a "jump table." This is like an array of memory addresses. It can use the integer's value as an index to directly jump to the correct block of code without any comparisons.

Result: This is extremely fast. It takes the same amount of time regardless of how many cases there are (O(1)). This is much faster than if-else for many integer cases.
Strategy C: Create a Hash Table (for Strings)
For a larger number of string cases (like case "admin", "editor", "viewer", "guest", ...), the compiler can do something very clever: it can pre-calculate the hash values of the case strings and build a simple hash map. When the switch runs, it computes the hash of the input string (role) and does a quick lookup to find the right code to execute.

Result: This is, on average, also an O(1) operation. It avoids doing many slow string-by-string comparisons, making it significantly faster than a long if-else chain for strings.
Practical Summary
Scenario	if-else Performance	switch Performance	Winner
Your example (3 string cases)	Linear Scan (O(n))	Compiles to the same linear scan	No difference.
Many integer cases	Linear Scan (O(n))	Jump Table (O(1))	switch
Many string cases	Linear Scan (O(n))	Hash Table (O(1) average)	switch

### Defer

A defer statement defers the execution of a function until the surrounding function returns.

The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.

```
package main

import "fmt"

func main() {
	defer fmt.Println("world")

	fmt.Println("hello")
}
```

### Stacking defers

Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.

To learn more about defer statements read this blog post.



```
package main

import "fmt"

func main() {
	fmt.Println("counting")

	for i := 0; i < 10; i++ {
		defer fmt.Println(i)
	}

	fmt.Println("done")
}
```
